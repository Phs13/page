#!/bin/sh
#
# page - A simple password manager using age written in POSIX sh.
#
# Copyright (C) 2020-2022 - Ricardo García Jiménez <ricardogj08@riseup.net>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this software except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Muestra mensajes de errores.
#
errors() {
  printf '%s.\n' "$1" >&2
  exit 1
}

#
# Muestra un mensaje de ayuda.
#
shelp() { printf '%s' "\
page 1.0 - A simple password manager using age written in POSIX sh.

Synopsis:
  page [OPTION]

Options:
  -a <NAME> - Add a new password.
  -c <NAME> - Copy a password to the clipboard.
  -d <NAME> - Delete a password.
  -g        - Generate a master key.
  -l        - List all password names.
  -s <NAME> - Show a password.

Environment vars:
  - Storage location:  export PAGE_DIR=~/.local/share/page
  - Password length:   export PAGE_LENGTH=12
  - Password pattern:  export PAGE_PATTERN=_[:alnum:]
  - Clipboard tool:    export PAGE_CLIPBOARD='waycopy -s seat0 -t text/plain'
  - Clipboard timeout: export PAGE_TIMEOUT=15
"
exit 0
}

#
# Valida si un string coincide con un patrón de búsqueda.
#
# @return boolean
#
# shellcheck disable=SC2254
#
match() { case $1 in $2) return 0; esac; return 1; }

#
# Genera una llave maestra de cifrado.
#
gen_key() {
  [ -f "$key" ] &&
    errors "Master key already exists"

  age-keygen | age -p > "$key" || rm -f "$key"
}

#
# Confirma una acción.
#
# @return boolean
#
confirm() {
  printf '%s [y/n]: ' "$1"

  #
  # Habilita la entrada sin formato,
  # stdin no espera un Return.
  #
  stty -icanon

  #
  # Lee un solo byte desde stdin.
  #
  answer=$(dd ibs=1 count=1 2>/dev/null)

  #
  # Habilita la entrada con formato.
  #
  stty icanon

  printf '\n'

  match "$answer" '[yY]'
}

#
# Lee una contraseña sin imprimirla.
#
pread() {
  printf '%s: ' "$2"

  stty -echo

  read -r "$1"

  stty echo

  printf '\n'
}

#
# Obtiene la llave pública de cifrado.
#
pub_key() { age -d -i "$key" "$key" | age-keygen -y; }

#
# Agrega una nueva contraseña.
#
add_pass() {
  [ -f "$name".age ] &&
    errors "Pass name '$name' already exists"

  if confirm "Generate a random password?"; then
    #
    # Genera una contraseña aleatoria
    # desde una serie de bytes aleatorios.
    #
    pass=$(LC_ALL=C tr -dc "${PAGE_PATTERN:-_[:alnum:]}" < /dev/urandom |
         dd ibs=1 obs=1 count="${PAGE_LENGTH:-12}" 2>/dev/null)
  else
    pread pass "Enter password"

    pread pass2 "Enter password (again)"

    #
    # shellcheck disable=SC2154
    #
    [ "$pass" = "$pass2" ] || errors "Passwords don't match"
  fi

  [ -z "$pass" ] && errors "Failed to generate a password"

  pub=$(pub_key)

  [ -z "$pub" ] && errors "Incorrect master key password"

  match "$name" '*/*' && { mkdir -p "$categ" ||
    errors "Couldn't create category '$categ'"; }

  #
  # Utiliza "age" para almacenar una contraseña
  # dentro de un archivo cifrado.
  #
  age -r "$pub" -o "$name".age <<-EOF &&
		$pass
	EOF

  printf '%s\n' "Saved '$name' to the store."
}

main() {
  command -v age 2>/dev/null >&2 ||
    errors "'age' not found"

  #
  # Ubicación de almacenamiento por defecto.
  #
  : "${PAGE_DIR:=${XDG_DATA_HOME:-$HOME/.local/share}/page}"

  mkdir -p "$PAGE_DIR" ||
    errors "Couldn't create password directory"

  cd "$PAGE_DIR" ||
    errors "Couldn't access password directory"

  match "$1" '-[acds]' && [ -z "$2" ] &&
    errors "Option $1 requires an argument"

  match "$1" '-[cds]' && [ ! -f "$2".age ] &&
    errors "Pass name '$2' doesn't exist"

  key=key.age

  match "$1" '-[acds]' && [ ! -f "$key" ] &&
    errors "Couldn't find master key"

  match "$2" '*/*' && match "$2" '*../*' &&
    errors "Category went out of bounds"

  match "$2" '/*' &&
    errors "Category can't start with '/'"

  #
  # Obtiene el nombre y la categoría de la contraseña.
  #
  name="$2"
  categ=${2%/*}

  #
  # Restringe los permisos de todos los archivos
  # generados solo al usuario actual: chmod 700
  #
  umask 077

  #
  # Asegura configurar la terminal a un estado
  # utilizable al finalizar el script o con Ctrl+C
  #
  [ -t 1 ] && trap 'stty echo icanon' INT EXIT

  case $1 in
    -a) add_pass ;;
    -c) copy_pass ;;
    -d) delete_pass ;;
    -g) gen_key ;;
    -l) list_pass ;;
    -s) show_pass ;;
     *) shelp
  esac
}

#
# Desactiva siempre el modo debug.
#
set +x

#
# Desactiva la expansión de nombres de archivos para
# evitar inseguridades con la división de palabras.
#
set -f

main "$@"
